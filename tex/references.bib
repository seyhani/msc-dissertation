 @article{netkat,
  title        = {NetKAT: Semantic Foundations for Networks},
  abstractnote = {Recent years have seen growing interest in high-level languages for programming networks. But the design of these languages has been largely ad hoc, driven more by the needs of applications and the capabilities of network hardware than by foundational principles. The lack of a semantic foundation has left language designers with little guidance in determining how to incorporate new features, and programmers without a means to reason precisely about their code. This paper presents NetKAT, a new network programming language that is based on a solid mathematical foundation and comes equipped with a sound and complete equational theory. We describe the design of NetKAT, including primitives for ﬁltering, modifying, and transmitting packets; union and sequential composition operators; and a Kleene star operator that iterates programs. We show that NetKAT is an instance of a canonical and well-studied mathematical structure called a Kleene algebra with tests (KAT) and prove that its equational theory is sound and complete with respect to its denotational semantics. Finally, we present practical applications of the equational theory including syntactic techniques for checking reachability, proving non-interference properties that ensure isolation between programs, and establishing the correctness of compilation algorithms.},
  author       = {Anderson, Carolyn Jane and Foster, Nate and Guha, Arjun and Jeannin, Jean-Baptiste and Kozen, Dexter and Schlesinger, Cole and Walker, David},
  pages        = {14},
  language     = {en}
}
 @article{Baier_Dubslaff_Funke_Jantsch_Majumdar_Piribauer_Ziemek_2021,
  title        = {From Verification to Causality-based Explications},
  url          = {http://arxiv.org/abs/2105.09533},
  abstractnote = {In view of the growing complexity of modern software architectures, formal models are increasingly used to understand why a system works the way it does, opposed to simply verifying that it behaves as intended. This paper surveys approaches to formally explicate the observable behavior of reactive systems. We describe how Halpern and Pearl’s notion of actual causation inspired verificationoriented studies of cause-effect relationships in the evolution of a system. A second focus lies on applications of the Shapley value to responsibility ascriptions, aimed to measure the influence of an event on an observable effect. Finally, formal approaches to probabilistic causation are collected and connected, and their relevance to the understanding of probabilistic systems is discussed.},
  note         = {arXiv: 2105.09533},
  journal      = {arXiv:2105.09533 [cs]},
  author       = {Baier, Christel and Dubslaff, Clemens and Funke, Florian and Jantsch, Simon and Majumdar, Rupak and Piribauer, Jakob and Ziemek, Robin},
  year         = {2021},
  month        = {May},
  language     = {en}
}
 @inproceedings{Beer_Heidinger_Kühne_Leitner-Fischer_Leue_2015,
  title     = {Symbolic causality checking using bounded model checking},
  booktitle = {International SPIN Workshop on Model Checking of Software},
  publisher = {Springer},
  author    = {Beer, Adrian and Heidinger, Stephan and Kühne, Uwe and Leitner-Fischer, Florian and Leue, Stefan},
  year      = {2015},
  pages     = {203–221}
}
 @article{Beer_Ben-David_Chockler_Orni_Trefler_2012,
  title    = {Explaining counterexamples using causality},
  volume   = {40},
  issn     = {0925-9856, 1572-8102},
  doi      = {10.1007/s10703-011-0132-2},
  number   = {1},
  journal  = {Formal Methods in System Design},
  author   = {Beer, Ilan and Ben-David, Shoham and Chockler, Hana and Orni, Avigail and Trefler, Richard},
  year     = {2012},
  month    = {Feb},
  pages    = {20–40},
  language = {en}
}
 @article{Caltais_Guetlein_Leue_2019,
  title    = {Causality for General LTL-definable Properties},
  volume   = {286},
  issn     = {2075-2180},
  doi      = {10.4204/EPTCS.286.1},
  journal  = {Electronic Proceedings in Theoretical Computer Science},
  author   = {Caltais, Georgiana and Guetlein, Sophie Linnea and Leue, Stefan},
  year     = {2019},
  month    = {Jan},
  pages    = {1–15},
  language = {en}
}
 @article{dynetkat,
  title   = {DyNetKAT: An Algebra of Dynamic Networks},
  journal = {arXiv preprint arXiv:2102.10035},
  author  = {Caltais, Georgiana and Hojjat, Hossein and Mousavi, Mohammad and Tunc, Hunkar Can},
  year    = {2021}
}
 @article{decomposing,
  title    = {(De-)Composing Causality in Labeled Transition Systems},
  volume   = {224},
  issn     = {2075-2180},
  doi      = {10.4204/EPTCS.224.3},
  journal  = {Electronic Proceedings in Theoretical Computer Science},
  author   = {Caltais, Georgiana and Leue, Stefan and Mousavi, Mohammad Reza},
  year     = {2016},
  month    = {Aug},
  pages    = {10–24},
  language = {en}
}
 @article{causal-hml,
  title        = {Causal Reasoning for Safety in Hennessy Milner Logic},
  volume       = {173},
  issn         = {01692968, 18758681},
  doi          = {10.3233/FI-2020-1922},
  abstractnote = {Determining and computing root causes in system failures is a signiﬁcant issue in science and engineering. In this paper, we introduce a notion of causality for explaining counterexamples in system analysis based on formal models. The counter-examples are produced by checking for hazardous situations expressed in the Hennessy-Milner Logic, in the context of Labelled Transition System models. We also introduce CauseJMu, a tool for automatically identifying such causal computations within a system model. CauseJMu relies on encoding causality in terms of an extension of Hennessy-Milner Logic to recursive formulae with data. The encodings enable deciding whether a certain computation is causal or not, using the mCRL2 model checker.},
  number       = {2–3},
  journal      = {Fundamenta Informaticae},
  author       = {Caltais, Georgiana and Mousavi, Mohammad Reza and Singh, Hargurbir},
  editor       = {Kleijn, Jetty and Leuştean, Laurenţiu and Lucanu, Dorel},
  year         = {2020},
  month        = {Mar},
  pages        = {217–251},
  language     = {en}
}
 @article{Caltais_Tunç,
  title        = {Explaining Safety Failures in NetKAT},
  abstractnote = {This work introduces a concept of explanations with respect to the violation of safe behaviours within software deﬁned networks (SDNs) expressible in NetKAT. The latter is a network programming language based on a wellstudied mathematical structure, namely, Kleene Algebra with Tests (KAT). Amongst others, the mathematical foundation of NetKAT gave rise to a sound and complete equational theory. In our setting, a safe behaviour is characterised by a NetKAT policy, or program, which does not enable forwarding packets from an ingress i to an undesirable egress e. We show how explanations for safety violations can be derived in an equational fashion, according to a modiﬁcation of the existing NetKAT axiomatisation. We propose an approach based on the Maude system for actually computing the undesired behaviours witnessing the forwarding of packets from i to e as above. SDN−SafeCheck is a tool based on Maude equational theories satisfying important properties such as Church-Rosser and termination. SDN−SafeCheck automatically identiﬁes all the undesired behaviours leading to e, covering forwarding paths up to a user speciﬁed size.},
  author       = {Caltais, Georgiana and Tunç, Hünkar Can},
  pages        = {32},
  language     = {en}
}
 @article{Chockler_Halpern_Kupferman_2008,
  title        = {What causes a system to satisfy a specification?},
  volume       = {9},
  issn         = {1529-3785, 1557-945X},
  doi          = {10.1145/1352582.1352588},
  abstractnote = {Even when a system is proven to be correct with respect to a speciﬁcation, there is still a question of how complete the speciﬁcation is, and whether it really covers all the behaviors of the system. Coverage metrics attempt to check which parts of a system are actually relevant for the veriﬁcation process to succeed. Recent work on coverage in model checking suggests several coverage metrics and algorithms for ﬁnding parts of the system that are not covered by the speciﬁcation. The work has already proven to be effective in practice, detecting design errors that escape early veriﬁcation efforts in industrial settings. In this paper, we relate a formal deﬁnition of causality given by Halpern and Pearl [2005] to coverage. We show that it gives signiﬁcant insight into unresolved issues regarding the deﬁnition of coverage and leads to potentially useful extensions of coverage. In particular, we introduce the notion of responsibility, which assigns to components of a system a quantitative measure of their relevance to the satisfaction of the speciﬁcation.},
  number       = {3},
  journal      = {ACM Transactions on Computational Logic},
  author       = {Chockler, Hana and Halpern, Joseph Y. and Kupferman, Orna},
  year         = {2008},
  month        = {Jun},
  pages        = {1–26},
  language     = {en}
}
 @article{Foerster_Schmid_Vissicchio_2019,
  title        = {Survey of Consistent Software-Defined Network Updates},
  volume       = {21},
  issn         = {1553-877X, 2373-745X},
  doi          = {10.1109/COMST.2018.2876749},
  abstractnote = {Computer networks have become a critical infrastructure. In fact, networks should not only meet strict requirements in terms of correctness, availability, and performance, but they should also be very ﬂexible and support fast updates, e.g., due to policy changes, increasing trafﬁc, or failures. This paper presents a structured survey of mechanism and protocols to update computer networks in a fast and consistent manner. In particular, we identify and discuss the different desirable consistency properties that should be provided throughout a network update, the algorithmic techniques which are needed to meet these consistency properties, and the implications on the speed and costs at which updates can be performed. We also explain the relationship between consistent network update problems and classic algorithmic optimization ones. While our survey is mainly motivated by the advent of Software-Deﬁned Networks (SDNs) and their primary need for correct and efﬁcient update techniques, the fundamental underlying problems are not new, and we provide a historical perspective of the subject as well.},
  note         = {arXiv: 1609.02305},
  number       = {2},
  journal      = {IEEE Communications Surveys & Tutorials},
  author       = {Foerster, Klaus-Tycho and Schmid, Stefan and Vissicchio, Stefano},
  year         = {2019},
  pages        = {1435–1461},
  language     = {en}
}
 @article{Groce_Chaki_Kroening_Strichman_2006,
  title        = {Error explanation with distance metrics},
  volume       = {8},
  issn         = {1433-2779, 1433-2787},
  doi          = {10.1007/s10009-005-0202-0},
  abstractnote = {In the event that a system does not satisfy a speciﬁcation, a model checker will typically automatically produce a counterexample trace that shows a particular instance of the undesirable behavior. Unfortunately, the important steps that follow the discovery of a counterexample are generally not automated. The user must ﬁrst decide if the counterexample shows genuinely erroneous behavior or is an artifact of improper speciﬁcation or abstraction. In the event that the error is real, there remains the difﬁcult task of understanding the error well enough to isolate and modify the faulty aspects of the system. This paper describes a (semi-) automated approach for assisting users in understanding and isolating errors in ANSI C programs. The approach, derived from Lewis’ counterfactual approach to causality, is based on distance metrics for program executions. Experimental results show that the power of the model checking engine can be used to provide assistance in understanding errors and to isolate faulty portions of the source code.},
  number       = {3},
  journal      = {International Journal on Software Tools for Technology Transfer},
  author       = {Groce, Alex and Chaki, Sagar and Kroening, Daniel and Strichman, Ofer},
  year         = {2006},
  month        = {Jun},
  pages        = {229–247},
  language     = {en}
}
 @article{hp-modified,
  title        = {A Modification of the Halpern-Pearl Definition of Causality},
  abstractnote = {The original Halpern-Pearl deﬁnition of causality [Halpern and Pearl, 2001] was updated in the journal version of the paper [Halpern and Pearl, 2005] to deal with some problems pointed out by Hopkins and Pearl [2003]. Here the deﬁnition is modiﬁed yet again, in a way that (a) leads to a simpler deﬁnition, (b) handles the problems pointed out by Hopkins and Pearl, and many others, (c) gives reasonable answers (that agree with those of the original and updated deﬁnition) in the standard problematic examples of causality, and (d) has lower complexity than either the original or updated deﬁnitions.},
  author       = {Halpern, Joseph Y},
  pages        = {12},
  language     = {en}
}
 @article{hp,
  title        = {Causes and Explanations: A Structural-Model Approach, Part I: Causes},
  url          = {http://arxiv.org/abs/cs/0011012},
  abstractnote = {We propose a new definition of actual cause, using structural equations to model counterfactuals. We show that the definition yields a plausible and elegant account of causation that handles well examples which have caused problems for other definitions and resolves major difficulties in the traditional account.},
  note         = {arXiv: cs/0011012},
  journal      = {arXiv:cs/0011012},
  author       = {Halpern, Joseph Y. and Pearl, Judea},
  year         = {2005},
  month        = {Nov}
}
 @inproceedings{Leitner-Fischer_Leue_2013,
  title     = {Causality checking for complex system models},
  booktitle = {International Workshop on Verification, Model Checking, and Abstract Interpretation},
  publisher = {Springer},
  author    = {Leitner-Fischer, Florian and Leue, Stefan},
  year      = {2013},
  pages     = {248–267}
}
 @inproceedings{Leitner-Fischer_Leue_2014,
  title     = {Spincause: A tool for causality checking},
  booktitle = {Proceedings of the 2014 International SPIN Symposium on Model Checking of Software},
  author    = {Leitner-Fischer, Florian and Leue, Stefan},
  year      = {2014},
  pages     = {117–120}
}
 @article{Reitblatt_Foster_Rexford_Schlesinger_Walker_2012,
  title     = {Abstractions for network update},
  volume    = {42},
  number    = {4},
  journal   = {ACM SIGCOMM Computer Communication Review},
  publisher = {ACM New York, NY, USA},
  author    = {Reitblatt, Mark and Foster, Nate and Rexford, Jennifer and Schlesinger, Cole and Walker, David},
  year      = {2012},
  pages     = {323–334}
}
 @article{Sassone_Nielsen_Winskel_1996,
  title        = {Models for concurrency: Towards a classification},
  abstractnote = {Models for concurrency can be classified with respect to three relevant parameters: behaviour/ system, interleaving/noninterleaving, linear/branching time. When modelling a process, a choice concerning such parameters corresponds to choosing the level of abstraction of the resulting semantics.},
  author       = {Sassone, Vladimiro and Nielsen, Mogens and Winskel, Glynn},
  year         = {1996},
  pages        = {52},
  language     = {en}
}
 @article{con-netkat,
  title        = {Concurrent NetKAT: Modeling and analyzing stateful, concurrent networks},
  rights       = {Creative Commons Attribution 4.0 International},
  url          = {https://arxiv.org/abs/2201.10485},
  doi          = {10.48550/ARXIV.2201.10485},
  abstractnote = {We introduce Concurrent NetKAT (CNetKAT), an extension of NetKAT with operators for specifying and reasoning about concurrency in scenarios where multiple packets interact through state. We provide a model of the language based on partially-ordered multisets (pomsets), which are a well-established mathematical structure for defining the denotational semantics of concurrent languages. We provide a sound and complete axiomatization of this model, and we illustrate the use of CNetKAT through examples. More generally, CNetKAT can be understood as an algebraic framework for reasoning about programs with both local state (in packets) and global state (in a global store).},
  publisher    = {arXiv},
  author       = {Wagemaker, Jana and Foster, Nate and Kappé, Tobias and Kozen, Dexter and Rot, Jurriaan and Silva, Alexandra},
  year         = {2022}
}
 @inbook{es,
  address      = {Berlin, Heidelberg},
  series       = {Lecture Notes in Computer Science},
  title        = {Event structures},
  volume       = {255},
  isbn         = {978-3-540-17906-1},
  url          = {http://link.springer.com/10.1007/3-540-17906-2_31},
  doi          = {10.1007/3-540-17906-2_31},
  abstractnote = {Event structures are a model of computational processes. They represent a process as a set of e’cent occurrences with relations to express how events causally depend on others. This paper introduces event structures, shows their relationship to Scott domains and Petri nets, and surveys their role in denotational semantics, both for modelling languages like CCS and CSP and languages with higher types.},
  booktitle    = {Petri Nets: Applications and Relationships to Other Models of Concurrency},
  publisher    = {Springer Berlin Heidelberg},
  author       = {Winskel, Glynn},
  year         = {1987},
  pages        = {325–392},
  collection   = {Lecture Notes in Computer Science},
  language     = {en}
}
 @inbook{Winskel,
  title     = {An Intodcuction to Event Structures},
  booktitle = {An introduction to event structures},
  author    = {Winskel, Glynn}
}
